@page "/Rooms"
@rendermode InteractiveServer

@using HotelHub.Domain.entities
@using HotelHub.Serviceinterfaces 


<h3>Rooms</h3>

<button class="btn btn-primary" @onclick="ShowAddModal">Add New Book</button>

@if (rooms == null)
{
    <span>Loading...</span>
}
else
{

<table class="table">
    <thead>
        <tr>
            <th>RoomNumber</th>
            <th>Type</th>
            <th>Price</th>
            <th>IsAvailable</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var room in rooms)
        {
            <tr>
                <td>@room.RoomNumber</td>
                <td>@room.Type</td>
                <td>@room.Price</td>
                <td>@room.IsAvailable</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => ShowEditModal(room)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteRoom(room)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
}
        
<AddEditRoomModal @ref="addEditRoomModal" OnSave="RefreshList" />


@code {
   
        [Inject] iRoomService RoomService { get; set; }

        private List<Room> rooms;

       private AddEditRoomModal addEditRoomModal;

        protected override async Task OnInitializedAsync()
        {
            await LoadRooms();
        }

        private async Task LoadRooms()
        {
            rooms =await RoomService.GetAll();
        }

        private void ShowAddModal()
        {
        addEditRoomModal.Show(new Room());
        }

        private void ShowEditModal(Room room)
        {
        addEditRoomModal.Show(room);
        }

        private async Task DeleteRoom(Room room)
        {
           await RoomService.Delete(room);
            await LoadRooms();
        }

        private async Task RefreshList()
        {
           await LoadRooms();
        }
   

}
